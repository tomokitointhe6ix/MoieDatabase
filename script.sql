

--Table Creation

CREATE TABLE Country
(CountryCode Varchar2(2),
CountryName Varchar2(30) UNIQUE,
constraint country_countrycode_pk primary key (CountryCode));

create table Genre
(Genre_Id Number(4,0),
GenreName Varchar2(30) Not Null UNIQUE,
constraint genre_genreid_pk primary key (Genre_Id));

create table Movie
(Movie_Id Number(4,0),
MovieTitle Varchar2(30) Not Null,
MovieYear Number(4,0) Not Null,
Country Varchar2(2) Not Null,
Genre_Id Number(4,0) Not Null,
RevenueFreq Number(4,0),
Last_Modification Date,
constraint movie_movieid_pk primary key (Movie_Id),
constraint movie_country_fk foreign key (Country)
references Country (CountryCode),
constraint movie_moviegenre_fk foreign key (Genre_Id)
references Genre (Genre_Id));

CREATE TABLE Revenue
(Revenue_Id Number(4,0),
Movie_Id Number(4,0),
Country Varchar2(2) Not Null,
RevenueAmount Number(10,2),
RevenueDate date Not Null,
constraint revenue_revenueid_pk primary key (Revenue_Id),
constraint revenue_country_fk foreign key (Country)
references Country (CountryCode),
constraint revenue_movieid_fk foreign key (Movie_Id)
references movie (Movie_Id));

create table Actor
(Actor_Id Number(4,0),
ActorFirstName Varchar2(30) Not Null,
ActorLastName Varchar2(30) Not Null,
constraint actor_actorid_pk primary key (Actor_Id));

create table Movie_Cast
(Movie_Id Number(4,0),
Actor_Id Number(4,0),
constraint moviecast_actorid_fk foreign key (Actor_Id)
references actor (Actor_Id),
constraint moviecast_movieid_fk foreign key (Movie_Id)
references movie (Movie_Id));

create table Director
(Director_Id Number(4,0),
DirectorFirstName Varchar2(30) Not Null,
DirectorLastName Varchar2(30) Not Null,
constraint director_directorid_pk primary key (Director_Id));

create table Movie_Director
(Movie_Id Number(4,0),
Director_Id Number(4,0),
constraint moviedirector_directorid_fk foreign key (Director_Id)
references director (Director_Id),
constraint moviedirector_movieid_fk foreign key (Movie_Id)
references movie (Movie_Id));


----------------------------------
--Insert data

INSERT INTO COUNTRY 
VALUES ('US', 'UNITED STATES OR AMERICA');
INSERT INTO COUNTRY 
VALUES ('ES', 'SPANISH');
INSERT INTO COUNTRY 
VALUES ('SY', 'SYRIA');
INSERT INTO COUNTRY 
VALUES ('JP', 'JAPAN');
INSERT INTO COUNTRY 
VALUES ('UK', 'UNITED KINGDOM');
INSERT INTO COUNTRY 
VALUES ('MX', 'MEXICO');


CREATE SEQUENCE DD_GENREID_SEQ 
START WITH 4110
INCREMENT BY 1
NOCACHE;

INSERT INTO GENRE 
VALUES (DD_GENREID_SEQ.NEXTVAL, 'ACTION/ADVENTURE');
INSERT INTO GENRE
VALUES (DD_GENREID_SEQ.NEXTVAL, 'ROMANTIC');
INSERT INTO GENRE
VALUES (DD_GENREID_SEQ.NEXTVAL, 'DOCUMENTARY');
INSERT INTO GENRE
VALUES (DD_GENREID_SEQ.NEXTVAL, 'SCI-FI/FANTASY');
INSERT INTO GENRE
VALUES (DD_GENREID_SEQ.NEXTVAL, 'HUMAN DRAMA');
INSERT INTO GENRE
VALUES (DD_GENREID_SEQ.NEXTVAL, 'HISTORICAL');
INSERT INTO GENRE
VALUES (DD_GENREID_SEQ.NEXTVAL, 'HORROR/THRILLER');
INSERT INTO GENRE
VALUES (DD_GENREID_SEQ.NEXTVAL, 'MUSICAL/COMEDY');
INSERT INTO GENRE
VALUES (DD_GENREID_SEQ.NEXTVAL, 'ANIMATION/COMIC');


CREATE SEQUENCE DD_MOVIEID_SEQ 
START WITH 1110
INCREMENT BY 1
NOCACHE;

INSERT INTO MOVIE
VALUES (DD_MOVIEID_SEQ.NEXTVAL, 'ANNIHILATION', 2018, 'US', 4113, 1, NULL);
INSERT INTO MOVIE
VALUES (DD_MOVIEID_SEQ.NEXTVAL, 'JUSTICE LEAGUE', 2017, 'US', 4110, 1, NULL);
INSERT INTO MOVIE
VALUES (DD_MOVIEID_SEQ.NEXTVAL, 'THE MUMMY', 1999, 'US', 4110, 1, NULL);
INSERT INTO MOVIE
VALUES (DD_MOVIEID_SEQ.NEXTVAL, 'STAR WARS: THE PHANTOM MENACE', 1999, 'US', 4110, 1, NULL);
INSERT INTO MOVIE
VALUES (DD_MOVIEID_SEQ.NEXTVAL, 'PANS LABYRINTH', 2006, 'MX', 4116, 1, NULL);
INSERT INTO MOVIE 
VALUES (DD_MOVIEID_SEQ.NEXTVAL, 'SPIDER-MAN 3', 2007, 'US', 4110, 1, NULL);
INSERT INTO MOVIE
VALUES (DD_MOVIEID_SEQ.NEXTVAL, 'CITY OF GHOSTS', 2017, 'SY', 4112, 1, NULL);
INSERT INTO MOVIE
VALUES (DD_MOVIEID_SEQ.NEXTVAL, 'YOUR NAME', 2016, 'JP', 4118, 1, NULL);
INSERT INTO MOVIE
VALUES (DD_MOVIEID_SEQ.NEXTVAL, 'BIRD BOX', 2018, 'US', 4116, 1, NULL);
INSERT INTO MOVIE 
VALUES (DD_MOVIEID_SEQ.NEXTVAL, 'SKYFALL', 2012, 'UK', 4110, 1, NULL);


CREATE SEQUENCE DD_REVENUEID_SEQ 
START WITH 1000
INCREMENT BY 1
NOCACHE;

INSERT INTO Revenue
VALUES (DD_REVENUEID_SEQ.NEXTVAL, 1110, 'US', 16536323,TO_DATE('1-JAN-20','DD-MON-YY'));
INSERT INTO Revenue
VALUES (DD_REVENUEID_SEQ.NEXTVAL, 1111, 'US', 25003690,TO_DATE('11-JUL-13','DD-MON-YY'));
INSERT INTO Revenue
VALUES (DD_REVENUEID_SEQ.NEXTVAL, 1112, 'US', 50063941,TO_DATE('21-DEC-99','DD-MON-YY'));
INSERT INTO Revenue
VALUES (DD_REVENUEID_SEQ.NEXTVAL, 1113, 'US', 39652104,TO_DATE('09-AUG-00','DD-MON-YY'));
INSERT INTO Revenue
VALUES (DD_REVENUEID_SEQ.NEXTVAL, 1114, 'MX', 12036520,TO_DATE('04-MAR-07','DD-MON-YY'));
INSERT INTO Revenue
VALUES (DD_REVENUEID_SEQ.NEXTVAL, 1115, 'US', 30659843,TO_DATE('13-APR-08','DD-MON-YY'));
INSERT INTO Revenue
VALUES (DD_REVENUEID_SEQ.NEXTVAL, 1116, 'US', 5096332,TO_DATE('09-SEP-18','DD-MON-YY'));
INSERT INTO Revenue
VALUES (DD_REVENUEID_SEQ.NEXTVAL, 1117, 'JP', 9830651,TO_DATE('23-JAN-17','DD-MON-YY'));
INSERT INTO Revenue
VALUES (DD_REVENUEID_SEQ.NEXTVAL, 1118, 'US', 11639899,TO_DATE('31-JAN-19','DD-MON-YY'));
INSERT INTO Revenue
VALUES (DD_REVENUEID_SEQ.NEXTVAL, 1119, 'UK', 2036845,TO_DATE('26-OCT-13','DD-MON-YY'));


CREATE SEQUENCE DD_ACTORID_SEQ 
START WITH 2110
INCREMENT BY 1
NOCACHE;

INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'DANIEL', 'CRAIG');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'JAVIER', 'BARDEM');

INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'TOBEY', 'MAGUIRE');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'KIRSTEN', 'DUNST');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'JAMES', 'FRANCO');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'J.K.', 'SIMMONS');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'TOPHER', 'GRACE');

INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'NATALIE', 'PORTMAN');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'BENEDICT', 'WONG');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'SONOYA', 'MIZUNO');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'OSCAR', 'ISAAC');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'GINA', 'RODRIGUEZ');

INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'BEN', 'AFFLECK');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'HENRY', 'CAVILL');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'GAL', 'GADOT');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'EZRA', 'MILLER');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'JASON', 'MOMOA');

INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'BRENDAN', 'FRASER');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'RACHEL', 'WEISZ');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'JOHN', 'HANNAH');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'ARNOLD', 'VOSLOO');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'JONATHAN', 'HYDE');

INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'LIAM', 'NEESON');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'EWAN', 'MCGREGOR');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'JUDI', 'DENCH');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'IAN', 'MCDIARMID');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'JAKE', 'LLOYD');

INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'IVANA', 'BAQUERO');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'ARIADNA', 'GIL');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'SERGI', 'LOPEZ');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'DOUG', 'JONES');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'ALEX', 'ANGULO');

INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'RYUNOSUKE', 'KAMIKI');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'MONE', 'KAMISHIRAISHI');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'RYO', 'NARITA');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'AOI', 'YUKI');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'NOBUNAGA', 'SHIMAZAKI');

INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'ABDELAZIZ', 'ALHAMZA');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'MOHAMAD', 'ALMUSARI');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'HAMOUD', 'ALMUSARI');

INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'SANDRA', 'BULLOCK');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'TREVANTE', 'RHODES');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'JOHN', 'MALKOVICH');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'SARAH', 'PAULSON');
INSERT INTO ACTOR
VALUES (DD_ACTORID_SEQ.NEXTVAL, 'JACKI', 'WEAVER');

INSERT INTO MOVIE_CAST
VALUES (1119, 2110);
INSERT INTO MOVIE_CAST
VALUES (1119, 2111);
INSERT INTO MOVIE_CAST
VALUES (1115, 2112);
INSERT INTO MOVIE_CAST
VALUES (1115, 2113);
INSERT INTO MOVIE_CAST
VALUES (1115, 2114);
INSERT INTO MOVIE_CAST
VALUES (1115, 2115);
INSERT INTO MOVIE_CAST
VALUES (1115, 2116);
INSERT INTO MOVIE_CAST
VALUES (1110, 2117);
INSERT INTO MOVIE_CAST
VALUES (1110, 2118);
INSERT INTO MOVIE_CAST
VALUES (1110, 2119);
INSERT INTO MOVIE_CAST
VALUES (1110, 2120);
INSERT INTO MOVIE_CAST
VALUES (1110, 2121);
INSERT INTO MOVIE_CAST
VALUES (1111, 2122);
INSERT INTO MOVIE_CAST
VALUES (1111, 2123);
INSERT INTO MOVIE_CAST
VALUES (1111, 2124);
INSERT INTO MOVIE_CAST
VALUES (1111, 2125);
INSERT INTO MOVIE_CAST
VALUES (1111, 2126);
INSERT INTO MOVIE_CAST
VALUES (1112, 2127);
INSERT INTO MOVIE_CAST
VALUES (1112, 2128);
INSERT INTO MOVIE_CAST
VALUES (1112, 2129);
INSERT INTO MOVIE_CAST
VALUES (1112, 2130);
INSERT INTO MOVIE_CAST
VALUES (1112, 2131);
INSERT INTO MOVIE_CAST
VALUES (1113, 2132);
INSERT INTO MOVIE_CAST
VALUES (1113, 2133);
INSERT INTO MOVIE_CAST
VALUES (1113, 2134);
INSERT INTO MOVIE_CAST
VALUES (1113, 2135);
INSERT INTO MOVIE_CAST
VALUES (1113, 2136);
INSERT INTO MOVIE_CAST
VALUES (1114, 2137);
INSERT INTO MOVIE_CAST
VALUES (1114, 2138);
INSERT INTO MOVIE_CAST
VALUES (1114, 2139);
INSERT INTO MOVIE_CAST
VALUES (1114, 2140);
INSERT INTO MOVIE_CAST
VALUES (1114, 2141);
INSERT INTO MOVIE_CAST
VALUES (1117, 2142);
INSERT INTO MOVIE_CAST
VALUES (1117, 2143);
INSERT INTO MOVIE_CAST
VALUES (1117, 2144);
INSERT INTO MOVIE_CAST
VALUES (1117, 2145);
INSERT INTO MOVIE_CAST
VALUES (1117, 2146);
INSERT INTO MOVIE_CAST
VALUES (1116, 2147);
INSERT INTO MOVIE_CAST
VALUES (1116, 2148);
INSERT INTO MOVIE_CAST
VALUES (1116, 2149);
INSERT INTO MOVIE_CAST
VALUES (1118, 2150);
INSERT INTO MOVIE_CAST
VALUES (1118, 2151);
INSERT INTO MOVIE_CAST
VALUES (1118, 2152);
INSERT INTO MOVIE_CAST
VALUES (1118, 2153);
INSERT INTO MOVIE_CAST
VALUES (1118, 2154);


CREATE SEQUENCE DD_DIRECTORID_SEQ 
START WITH 3200
INCREMENT BY 1
NOCACHE;

INSERT INTO director
VALUES (DD_DIRECTORID_SEQ.NEXTVAL, 'ALEX', 'GARLAND');
INSERT INTO director
VALUES (DD_DIRECTORID_SEQ.NEXTVAL, 'ZACK', 'SNYDER');
INSERT INTO director
VALUES (DD_DIRECTORID_SEQ.NEXTVAL, 'STEPHEN', 'SOMMERS');
INSERT INTO director
VALUES (DD_DIRECTORID_SEQ.NEXTVAL, 'GEORGE', 'LUCAS');
INSERT INTO director
VALUES (DD_DIRECTORID_SEQ.NEXTVAL, 'GUILLERMO', 'DEL TORO');
INSERT INTO director
VALUES (DD_DIRECTORID_SEQ.NEXTVAL, 'SAM', 'RAIMI');
INSERT INTO director
VALUES (DD_DIRECTORID_SEQ.NEXTVAL, 'MATTHEW', 'HEINEMAN');
INSERT INTO director
VALUES (DD_DIRECTORID_SEQ.NEXTVAL, 'MAKOTO', 'SHINKAI');
INSERT INTO director
VALUES (DD_DIRECTORID_SEQ.NEXTVAL, 'SUSANNE', 'BIER');
INSERT INTO director
VALUES (DD_DIRECTORID_SEQ.NEXTVAL, 'SAM','MENDES');

INSERT INTO MOVIE_DIRECTOR
VALUES (1110, 3200);
INSERT INTO MOVIE_DIRECTOR
VALUES (1111, 3201);
INSERT INTO MOVIE_DIRECTOR
VALUES (1112, 3202);
INSERT INTO MOVIE_DIRECTOR
VALUES (1113, 3203);
INSERT INTO MOVIE_DIRECTOR
VALUES (1114, 3204);
INSERT INTO MOVIE_DIRECTOR
VALUES (1115, 3205);
INSERT INTO MOVIE_DIRECTOR
VALUES (1116, 3206);
INSERT INTO MOVIE_DIRECTOR
VALUES (1117, 3207);
INSERT INTO MOVIE_DIRECTOR
VALUES (1118, 3208);
INSERT INTO MOVIE_DIRECTOR
VALUES (1119, 3209);


----------------------------------
-- Index

CREATE INDEX movie_movietitle_idx 
ON MOVIE(MOVIETITLE);
CREATE INDEX revenue_country_idx 
ON REVENUE(Country);
CREATE INDEX revenue_date_idx 
ON REVENUE(REVENUEDate);



--------------------------------------------------------------------



-- Triggers

-- Trigger to automate creating primary key (Movie_id) value when inserting a new movie
CREATE OR REPLACE
TRIGGER MOVIE_NEWID_TRG
BEFORE INSERT ON MOVIE
FOR EACH ROW
BEGIN
  :NEW.MOVIE_ID := DD_MOVIEID_SEQ.NEXTVAL;
END;

-- Insert a new movie without specifying primary key
INSERT INTO MOVIE(MOVIETITLE, MOVIEYEAR, COUNTRY, GENRE_ID, REVENUEFREQ, LAST_MODIFICATION)
VALUES ('THE WAY BACK', 2020, 'US', 4114, 0, NULL);

-- See the result
SELECT *
FROM movie;


-- Trigger to check if the same title of a movie already exists in the table
CREATE OR REPLACE TRIGGER MOVIE_CHECK_TRG
FOR insert ON Movie
COMPOUND TRIGGER
CURSOR title_cur IS
    SELECT MovieTitle FROM Movie;
    TYPE title_typ IS TABLE OF title_cur%ROWTYPE INDEX BY BINARY_INTEGER;
title_tbl title_typ;
int NUMBER(2) := 0;

BEFORE STATEMENT IS
BEGIN
    FOR ideach IN title_cur LOOP
        int := int + 1;
        title_tbl(int).MovieTitle := ideach.MovieTitle;
    END LOOP;
END BEFORE STATEMENT;

BEFORE EACH ROW IS
BEGIN
    FOR i IN 1..title_tbl.COUNT LOOP
        IF title_tbl(i).MovieTitle = :NEW.MovieTitle THEN
            dbms_output.put_line( 'A same title of movie already exists in the table.' );
            dbms_output.put_line( 'Please make sure if the movies are different.' );
        END IF;
    END LOOP; 
    END BEFORE EACH ROW;
END;

-- Test the trigger
INSERT INTO MOVIE
VALUES (DD_MOVIEID_SEQ.NEXTVAL, 'ANNIHILATION', 2018, 'US', 4113, 1, NULL);



-- Trigger to add the number of revenue on a movie when a new revenue is inserted
CREATE OR REPLACE TRIGGER MOIVE_REVENUEFREQ_TRG
AFTER insert ON Revenue
FOR EACH ROW
DECLARE
revenue_num Movie.RevenueFreq%TYPE := 1;
BEGIN
UPDATE Movie SET RevenueFreq = RevenueFreq + revenue_num
    WHERE Movie_Id = :NEW.Movie_Id;
END;

-- Insert a new revenue
INSERT INTO Revenue
VALUES (DD_REVENUEID_SEQ.NEXTVAL, 1111, 'MX', 3636323,TO_DATE('1-MAR-20','DD-MON-YY'));

-- See the result
SELECT *
FROM MOVIE;


-- Functions *One of functions is used in procedures so please create functions first*

-- A function to quickly see the level of a revenue(LARGE/MEDIUM/SMALL)
CREATE OR REPLACE FUNCTION REVENUE_LEVEL_SF
    (p_revenue Number)
RETURN VARCHAR2
IS
    lv_level_txt VARCHAR2(30);
BEGIN
    IF p_revenue > 10000000 THEN
        lv_level_txt := 'The revenue level is: LARGE';
        ELSIF p_revenue > 5000000 THEN
            lv_level_txt := 'The revenue level is: MEDIUM';
        ELSE
            lv_level_txt := 'The revenue level is: SMALL';
    END IF;
RETURN lv_level_txt;
END;

-- See which revenue level the revenue 1007 is
DECLARE
lv_revenue_amount revenue.REVENUEAMOUNT%TYPE;
BEGIN
SELECT REVENUEAMOUNT
    INTO lv_revenue_amount
    FROM revenue
    WHERE REVENUE_ID = 1007;
DBMS_OUTPUT.PUT_LINE(REVENUE_LEVEL_SF(lv_revenue_amount));
END;


-- A function to format a revenue
CREATE OR REPLACE FUNCTION REVENUE_FMT_SF
(p_num NUMBER)
RETURN VARCHAR2
IS
lv_amt_txt VARCHAR2(20);
BEGIN
lv_amt_txt := TO_CHAR(p_num,'$999,999,999.99');
RETURN lv_amt_txt;
END;

-- Display formatted revenue 1000
DECLARE
lv_amt_num revenue.REVENUEAMOUNT%TYPE;
BEGIN
SELECT REVENUEAMOUNT
    INTO lv_amt_num
    FROM revenue
    WHERE REVENUE_ID = 1000;
DBMS_OUTPUT.PUT_LINE('Revenue is'||REVENUE_FMT_SF(lv_amt_num));
END;


-------------------------------
-- Procedures

-- Procedure to add new revenues
CREATE OR REPLACE PROCEDURE REVENUE_ADD_SP
(p_revenueid IN revenue.revenue_id%TYPE,
p_movieid IN revenue.Movie_Id%TYPE,
p_Country IN revenue.Country%TYPE,
p_RevenueAmount IN revenue.RevenueAmount%TYPE,
p_RevenueDate IN revenue.RevenueDate%TYPE)
IS
BEGIN
INSERT INTO revenue
VALUES (p_revenueid, p_movieid, p_Country, p_RevenueAmount, p_RevenueDate);
END;

-- Use the procedure
BEGIN
REVENUE_ADD_SP(DD_REVENUEID_SEQ.NEXTVAL, 1120, 'US', 2055931, TO_DATE('10-MAR-20','DD-MON-YY'));
END;

-- See if the new revenue is added
 select m.movie_id, m.MOVIETITLE, r.REVENUE_ID, r.COUNTRY, r.REVENUEAMOUNT, r.REVENUEDATE
 FROM movie m, revenue r
 WHERE m.movie_id = r.movie_id
 ORDER BY r.REVENUE_ID;


-- Procedure to see movie's total revenue (+ using REVENUE_FMT_SF function in result)
CREATE OR REPLACE PROCEDURE movie_totalrevenue_sp
 IS
  CURSOR dept_cur IS 
 select m.MOVIETITLE, SUM(r.REVENUEAMOUNT) total
 FROM movie m, revenue r
 WHERE m.movie_id = r.movie_id
 GROUP BY m.MOVIETITLE
 ORDER BY m.MOVIETITLE;
BEGIN
  FOR dept_rec IN dept_cur LOOP
    DBMS_OUTPUT.PUT_LINE(dept_rec.MOVIETITLE ||' : '|| REVENUE_FMT_SF(dept_rec.total));
  END LOOP;
END;

-- Use the procedure to each movie's total revenue
BEGIN
    movie_totalrevenue_sp;
END;


-- Procedure to sum revenues by specific country
CREATE OR REPLACE PROCEDURE REVENUE_SRC_SP
(p_Countryinput IN revenue.Country%TYPE,
p_sum OUT NUMBER)
IS
BEGIN
    SELECT SUM(REVENUEAMOUNT)
    INTO p_sum
    FROM revenue
    WHERE revenue.country = p_Countryinput
    GROUP BY country;
END;

-- Use the procedure to sum revenues of US (+ using REVENUE_FMT_SF function in result)
DECLARE
lv_src_revenuecountry revenue.country%TYPE := 'US';
lv_src_revenuesum NUMBER;
BEGIN
REVENUE_SRC_SP(lv_src_revenuecountry, lv_src_revenuesum);
DBMS_OUTPUT.PUT_LINE('Total revenues in '  || lv_src_revenuecountry  || ' is' || REVENUE_FMT_SF(lv_src_revenuesum));
END;



